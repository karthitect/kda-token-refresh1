/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.kinesisanalytics.payloads;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class APIToken extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7556491781441073612L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"APIToken\",\"namespace\":\"com.amazonaws.services.kinesisanalytics.payloads\",\"fields\":[{\"name\":\"tokenvalue\",\"type\":\"string\"},{\"name\":\"tokenissuetimestamp\",\"type\":\"long\"},{\"name\":\"tokenduration\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence tokenvalue;
  @Deprecated public long tokenissuetimestamp;
  @Deprecated public long tokenduration;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public APIToken() {}

  /**
   * All-args constructor.
   * @param tokenvalue The new value for tokenvalue
   * @param tokenissuetimestamp The new value for tokenissuetimestamp
   * @param tokenduration The new value for tokenduration
   */
  public APIToken(java.lang.CharSequence tokenvalue, java.lang.Long tokenissuetimestamp, java.lang.Long tokenduration) {
    this.tokenvalue = tokenvalue;
    this.tokenissuetimestamp = tokenissuetimestamp;
    this.tokenduration = tokenduration;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tokenvalue;
    case 1: return tokenissuetimestamp;
    case 2: return tokenduration;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tokenvalue = (java.lang.CharSequence)value$; break;
    case 1: tokenissuetimestamp = (java.lang.Long)value$; break;
    case 2: tokenduration = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tokenvalue' field.
   * @return The value of the 'tokenvalue' field.
   */
  public java.lang.CharSequence getTokenvalue() {
    return tokenvalue;
  }

  /**
   * Sets the value of the 'tokenvalue' field.
   * @param value the value to set.
   */
  public void setTokenvalue(java.lang.CharSequence value) {
    this.tokenvalue = value;
  }

  /**
   * Gets the value of the 'tokenissuetimestamp' field.
   * @return The value of the 'tokenissuetimestamp' field.
   */
  public java.lang.Long getTokenissuetimestamp() {
    return tokenissuetimestamp;
  }

  /**
   * Sets the value of the 'tokenissuetimestamp' field.
   * @param value the value to set.
   */
  public void setTokenissuetimestamp(java.lang.Long value) {
    this.tokenissuetimestamp = value;
  }

  /**
   * Gets the value of the 'tokenduration' field.
   * @return The value of the 'tokenduration' field.
   */
  public java.lang.Long getTokenduration() {
    return tokenduration;
  }

  /**
   * Sets the value of the 'tokenduration' field.
   * @param value the value to set.
   */
  public void setTokenduration(java.lang.Long value) {
    this.tokenduration = value;
  }

  /**
   * Creates a new APIToken RecordBuilder.
   * @return A new APIToken RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder newBuilder() {
    return new com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder();
  }

  /**
   * Creates a new APIToken RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new APIToken RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder newBuilder(com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder other) {
    return new com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder(other);
  }

  /**
   * Creates a new APIToken RecordBuilder by copying an existing APIToken instance.
   * @param other The existing instance to copy.
   * @return A new APIToken RecordBuilder
   */
  public static com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder newBuilder(com.amazonaws.services.kinesisanalytics.payloads.APIToken other) {
    return new com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder(other);
  }

  /**
   * RecordBuilder for APIToken instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<APIToken>
    implements org.apache.avro.data.RecordBuilder<APIToken> {

    private java.lang.CharSequence tokenvalue;
    private long tokenissuetimestamp;
    private long tokenduration;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tokenvalue)) {
        this.tokenvalue = data().deepCopy(fields()[0].schema(), other.tokenvalue);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenissuetimestamp)) {
        this.tokenissuetimestamp = data().deepCopy(fields()[1].schema(), other.tokenissuetimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenduration)) {
        this.tokenduration = data().deepCopy(fields()[2].schema(), other.tokenduration);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing APIToken instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.kinesisanalytics.payloads.APIToken other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tokenvalue)) {
        this.tokenvalue = data().deepCopy(fields()[0].schema(), other.tokenvalue);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenissuetimestamp)) {
        this.tokenissuetimestamp = data().deepCopy(fields()[1].schema(), other.tokenissuetimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenduration)) {
        this.tokenduration = data().deepCopy(fields()[2].schema(), other.tokenduration);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'tokenvalue' field.
      * @return The value.
      */
    public java.lang.CharSequence getTokenvalue() {
      return tokenvalue;
    }

    /**
      * Sets the value of the 'tokenvalue' field.
      * @param value The value of 'tokenvalue'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder setTokenvalue(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tokenvalue = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenvalue' field has been set.
      * @return True if the 'tokenvalue' field has been set, false otherwise.
      */
    public boolean hasTokenvalue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tokenvalue' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder clearTokenvalue() {
      tokenvalue = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenissuetimestamp' field.
      * @return The value.
      */
    public java.lang.Long getTokenissuetimestamp() {
      return tokenissuetimestamp;
    }

    /**
      * Sets the value of the 'tokenissuetimestamp' field.
      * @param value The value of 'tokenissuetimestamp'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder setTokenissuetimestamp(long value) {
      validate(fields()[1], value);
      this.tokenissuetimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenissuetimestamp' field has been set.
      * @return True if the 'tokenissuetimestamp' field has been set, false otherwise.
      */
    public boolean hasTokenissuetimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tokenissuetimestamp' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder clearTokenissuetimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenduration' field.
      * @return The value.
      */
    public java.lang.Long getTokenduration() {
      return tokenduration;
    }

    /**
      * Sets the value of the 'tokenduration' field.
      * @param value The value of 'tokenduration'.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder setTokenduration(long value) {
      validate(fields()[2], value);
      this.tokenduration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenduration' field has been set.
      * @return True if the 'tokenduration' field has been set, false otherwise.
      */
    public boolean hasTokenduration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tokenduration' field.
      * @return This builder.
      */
    public com.amazonaws.services.kinesisanalytics.payloads.APIToken.Builder clearTokenduration() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public APIToken build() {
      try {
        APIToken record = new APIToken();
        record.tokenvalue = fieldSetFlags()[0] ? this.tokenvalue : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tokenissuetimestamp = fieldSetFlags()[1] ? this.tokenissuetimestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.tokenduration = fieldSetFlags()[2] ? this.tokenduration : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
